AWSTemplateFormatVersion: 2010-09-09
Description: QnA Bot

Metadata:
  License:
    Description: >
      Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
      SPDX-License-Identifier: MIT-0

      Permission is hereby granted, free of charge, to any person obtaining a copy of this
      software and associated documentation files (the "Software"), to deal in the Software
      without restriction, including without limitation the rights to use, copy, modify,
      merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
      permit persons to whom the Software is furnished to do so.

      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
      INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
      PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
      HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
      OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
      SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

  AWS::CloudFormation::Interface: 
    ParameterGroups:
      -
        Label:
          default: Lambda Configuration
        Parameters:
          - lambaFunctionName
          - functionIamRole
      -
         Label:
          default: Runtime configuration     
         Parameters:
          - pythonRuntime
          - cpuArchitecture         

Parameters:
  lambaFunctionName:
    Type: String
    Description: Name of Lambda function that starts with "qna-"(letters, numbers, hyphens, or underscores with no spaces up to 64 characters in length) 
    ConstraintDescription: Enter a valid name
    AllowedPattern: ".+"
    Default: "qna-Lambda"

  functionIamRole:
    Type: String
    Description: Name of IAM role to attach (Copy from Lambda Hook Instructions in Designer Page)
    ConstraintDescription: Do specify IAM role name
    AllowedPattern: ".+"

  cpuArchitecture:
    Type: String
    AllowedValues:
      - x86_64
      - arm64
    Description: Instruction set architecture
    Default: arm64

  pythonRuntime:
    Type: String
    AllowedPattern: "python3\\.\\d{1,2}"
    Description: Python 3 runtime version ( https://docs.aws.amazon.com/lambda/latest/dg/lambda-python.html )
    Default: python3.10

  ai21ApiKeySecretName:
    Type: String
    Default: ai21-api-key

  anthropicApiKeySecretName:
    Type: String
    Default: anthropic-api-key

Resources:
  secretAi21ApiKey:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: AI21 API Key
      Name: !Ref ai21ApiKeySecretName
      
  secretAnthropicApiKey:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: Anthropic API Key
      Name: !Ref anthropicApiKeySecretName

  CreateTestDBPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy allowing role to access secret in secrets manager
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'secretsmanager:GetResourcePolicy'
              - 'secretsmanager:GetSecretValue'
              - 'secretsmanager:DescribeSecret'
              - 'secretsmanager:ListSecretVersionIds'
            Resource:
              - !Ref secretAi21ApiKey
              - !Ref secretAnthropicApiKey
      Roles:
        - !Ref functionIamRole

  # lambdaLayerLangchain:
  #   Type: AWS::Lambda::LayerVersion
  #   Properties: 
  #     CompatibleRuntimes: 
  #       - python3.10
  #     Content: 
  #       S3Bucket: anycompany-personalize-lab
  #       S3Key: qnabot-blog/langchain.zip
  #     Description: Langchain Lambda layer
  #     LayerName: langchain-layer

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "[${AWS::StackName}]-QnA Bot Public Endpoint Lambda"
      FunctionName: !Ref lambaFunctionName
      Handler: "index.lambda_handler"
      Role: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${functionIamRole}"
      MemorySize: 128
      Timeout: 5
      Architectures:
      - !Ref cpuArchitecture
      Runtime: !Ref pythonRuntime       
      # Layers:
      #   - !Ref lambdaLayerLangchain
      Environment:
        Variables:
          AI21_API_KEY_SECRET_NAME: !Ref ai21ApiKeySecretName
          ANTHROPIC_API_KEY_SECRET_NAME: !Ref anthropicApiKeySecretName
      Code:
        S3Bucket: anycompany-personalize-lab
        S3Key: qnabot-blog/lambda_function.zip
        # ZipFile: |
        #   import boto3
        #   from botocore.exceptions import ClientError
        #   import os
        #   from langchain.llms import AI21, Anthropic
        #   from langchain.llms.ai21 import AI21PenaltyData
        #   # from langchain import PromptTemplate, LLMChain


        #   secrets_client = boto3.client('secretsmanager')
        #   ai21_secret_name = os.environ['AI21_API_KEY_SECRET_NAME']
        #   anthropic_secret_name = os.environ['ANTHROPIC_API_KEY_SECRET_NAME']


        #   def get_secret(secret_name):
        #       try:
        #           response = secrets_client.get_secret_value(
        #               SecretId=secret_name
        #           )
        #       except ClientError as e:
        #           raise e

        #       api_key = response['SecretString']

        #       return api_key


        #   def get_llm(llm_model, params):

        #       if llm_model == 'AI21':
        #           # get API key from Secrets Manager
        #           api_key = get_secret(ai21_secret_name)
        #           model = AI21(
        #               ai21_api_key=api_key,
        #               numResults=1,
        #               maxTokens=params['maxTokens'],
        #               minTokens=params['minTokens'],
        #               temperature=params['temperature'],
        #               topP=params['topP'],
        #               # topKReturn=params['topKReturn'],
        #               frequencyPenalty=AI21PenaltyData(
        #                   scale=1,
        #                   applyToWhitespaces=True,
        #                   applyToPunctuations=True,
        #                   applyToNumbers=True,
        #                   applyToStopwords=True,
        #                   applyToEmojis=True
        #               ),
        #               presencePenalty=AI21PenaltyData(
        #                   scale=1,
        #                   applyToWhitespaces=True,
        #                   applyToPunctuations=True,
        #                   applyToNumbers=True,
        #                   applyToStopwords=True,
        #                   applyToEmojis=True
        #               ),
        #               countPenalty=AI21PenaltyData(
        #                   scale=1,
        #                   applyToWhitespaces=True,
        #                   applyToPunctuations=True,
        #                   applyToNumbers=True,
        #                   applyToStopwords=True,
        #                   applyToEmojis=True
        #               )
        #           )

        #       elif llm_model == 'ANTHROPIC':
        #           api_key = get_secret(anthropic_secret_name)
        #           model = Anthropic(model="<model_name>", anthropic_api_key=api_key)

        #       return model


        #   def lambda_handler(event, context):
                    
        #       prompt = event["prompt"]
        #       model_params = event["parameters"]
        #       # settings = event["settings"]
        #       # apiKey = settings['LLM_THIRD_PARTY_API_KEY']
        #       llm_model_name = model_params['LLM_THIRD_PARTY_MODEL']

        #       llm = get_llm(llm_model_name, model_params)

        #       generated_text = llm(prompt)

        #       # if 'contextualAnswers' in model_params and model_params['contextualAnswers'] == 'TRUE':
        #       #     generated_text = get_contextualAnswers(prompt,model_params,apiKey)
        #       # else:
        #       #     generated_text = get_jurrasic(prompt,model_params,apiKey)

        #       return {
        #           'generated_text': generated_text
        #       }

      Tags:
        - Key: StackName
          Value: !Sub ${AWS::StackName}
        - Key: StackId
          Value: !Sub ${AWS::StackId}


Outputs:
  lambdaFunctionConsole:
    Description: Lambda console
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${lambdaFunction}?tab=code"

  lambdaArn:
    Description: ARN of Lambda Function
    Value: !GetAtt lambdaFunction.Arn